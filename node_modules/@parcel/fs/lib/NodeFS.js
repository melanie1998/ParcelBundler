"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeFS = void 0;

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

function _ncp() {
  const data = _interopRequireDefault(require("ncp"));

  _ncp = function () {
    return data;
  };

  return data;
}

function _mkdirp() {
  const data = _interopRequireDefault(require("mkdirp"));

  _mkdirp = function () {
    return data;
  };

  return data;
}

function _rimraf() {
  const data = _interopRequireDefault(require("rimraf"));

  _rimraf = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _core() {
  const data = require("@parcel/core");

  _core = function () {
    return data;
  };

  return data;
}

function _fsWriteStreamAtomic() {
  const data = _interopRequireDefault(require("@parcel/fs-write-stream-atomic"));

  _fsWriteStreamAtomic = function () {
    return data;
  };

  return data;
}

function _watcher() {
  const data = _interopRequireDefault(require("@parcel/watcher"));

  _watcher = function () {
    return data;
  };

  return data;
}

function _package() {
  const data = _interopRequireDefault(require("../package.json"));

  _package = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Most of this can go away once we only support Node 10+, which includes
// require('fs').promises
const realpath = (0, _utils().promisify)(_fs().default.realpath);

class NodeFS {
  constructor() {
    _defineProperty(this, "readFile", (0, _utils().promisify)(_fs().default.readFile));

    _defineProperty(this, "copyFile", (0, _utils().promisify)(_fs().default.copyFile));

    _defineProperty(this, "stat", (0, _utils().promisify)(_fs().default.stat));

    _defineProperty(this, "readdir", (0, _utils().promisify)(_fs().default.readdir));

    _defineProperty(this, "unlink", (0, _utils().promisify)(_fs().default.unlink));

    _defineProperty(this, "utimes", (0, _utils().promisify)(_fs().default.utimes));

    _defineProperty(this, "mkdirp", (0, _utils().promisify)(_mkdirp().default));

    _defineProperty(this, "rimraf", (0, _utils().promisify)(_rimraf().default));

    _defineProperty(this, "ncp", (0, _utils().promisify)(_ncp().default));

    _defineProperty(this, "createReadStream", _fs().default.createReadStream);

    _defineProperty(this, "cwd", process.cwd);

    _defineProperty(this, "chdir", process.chdir);

    _defineProperty(this, "statSync", _fs().default.statSync);

    _defineProperty(this, "realpathSync", _fs().default.realpathSync);

    _defineProperty(this, "existsSync", _fs().default.existsSync);

    _defineProperty(this, "readdirSync", _fs().default.readdirSync);
  }

  createWriteStream(filePath, options) {
    return (0, _fsWriteStreamAtomic().default)(filePath, options);
  }

  async writeFile(filePath, contents, options) {
    let tmpFilePath = getTempFilePath(filePath);
    await _fs().default.promises.writeFile(tmpFilePath, contents, // $FlowFixMe
    options);
    await _fs().default.promises.rename(tmpFilePath, filePath);
  }

  readFileSync(filePath, encoding) {
    if (encoding != null) {
      return _fs().default.readFileSync(filePath, encoding);
    }

    return _fs().default.readFileSync(filePath);
  }

  async realpath(originalPath) {
    try {
      return await realpath(originalPath, 'utf8');
    } catch (e) {// do nothing
    }

    return originalPath;
  }

  exists(filePath) {
    return new Promise(resolve => {
      _fs().default.exists(filePath, resolve);
    });
  }

  watch(dir, fn, opts) {
    return _watcher().default.subscribe(dir, fn, opts);
  }

  getEventsSince(dir, snapshot, opts) {
    return _watcher().default.getEventsSince(dir, snapshot, opts);
  }

  async writeSnapshot(dir, snapshot, opts) {
    await _watcher().default.writeSnapshot(dir, snapshot, opts);
  }

  static deserialize() {
    return new NodeFS();
  }

  serialize() {
    return null;
  }

}

exports.NodeFS = NodeFS;
(0, _core().registerSerializableClass)(`${_package().default.version}:NodeFS`, NodeFS);
let writeStreamCalls = 0;
let threadId;

try {
  ({
    threadId
  } = require('worker_threads'));
} catch {} //
// Generate a temporary file path used for atomic writing of files.


function getTempFilePath(filePath) {
  writeStreamCalls = writeStreamCalls % Number.MAX_SAFE_INTEGER;
  return filePath + '.' + process.pid + (threadId != null ? '.' + threadId : '') + '.' + (writeStreamCalls++).toString(36);
}